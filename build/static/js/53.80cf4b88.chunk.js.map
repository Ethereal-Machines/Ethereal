{"version":3,"sources":["services/api/update-password.js","update-password/update-password.jsx","components/form/form-controls/form-control.jsx","components/form/button/button.jsx","components/form/form.jsx","components/form/heading/heading.jsx","components/form/form-controls/input.jsx"],"names":["updatePassword","callback","id","data","token","axios","patch","headers","then","res","catch","err","Content","Layout","Footer","connect","state","basic","Basic","dispatch","firstTime","type","actionType","value","props","useState","password","reTypePassword","seterr","status","history","push","response","console","log","onInputChange","e","target","name","style","marginTop","height","className","heading","onSubmitHandler","preventDefault","GetToken","_id","prefixType","placeholder","isRequired","labelName","isType","htmlTypes","isBlock","textAlign","marginBottom","formControl","children","btn","htmlType","block","size","isSize","disabled","isDisabled","shape","classValue","onClick","forms","onSubmit","inputType","htmlFor","prefix","color","onChange","required","readOnly","isReadonly"],"mappings":"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","file":"static/js/53.80cf4b88.chunk.js","sourcesContent":[" \r\n\r\nimport axios from '../axios/axios'\r\n\r\nconst updatePassword = (callback, id, data, token) => {\r\n    axios.patch(`/user/update-password/${id}`, data, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Authorization': token ? `Token ${token}` : '',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n        .then((res) => {\r\n            callback(res)\r\n        }).catch(err => callback(err))\r\n}\r\n\r\nexport default updatePassword","\r\n\r\nimport React, { Component, useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Layout } from 'antd'\r\nimport Header from '../components/header/header'\r\nimport Heading from '../components/form/heading/heading'\r\nimport InputType from '../components/form/form-controls/input'\r\nimport Button from '../components/form/button/button'\r\nimport Form from '../components/form/form'\r\n//api\r\nimport updatePassword from '../services/api/update-password';\r\nimport * as actionType from '../store/actions/action-type'\r\nimport { GetToken } from '../helpers/token'\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nconst UpdatePassword = (props) => {\r\n\r\n    const [password, setpassword] = useState('')\r\n    const [reTypePassword, setreTypePassword] = useState('')\r\n    const [err, seterr] = useState('')\r\n\r\n    const callback = (data) => {\r\n        if (data.status === 200) {\r\n            props.firstTime(data.data);\r\n            seterr('');\r\n            props.history.push('/user/profile');\r\n        } else if (data.response) {\r\n            console.log(data.response);\r\n        }\r\n    }\r\n\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        const token = GetToken();\r\n        if (password === reTypePassword) {\r\n            if (token) {\r\n                updatePassword(callback, props.basic._id, { password: password }, token);\r\n            } else {\r\n                console.log('Token is missing');\r\n            }\r\n        } else {\r\n            seterr('Password not matched');\r\n        }\r\n    }\r\n\r\n    const onInputChange = (e) => {\r\n        e.target.name(e.target.value)\r\n    }\r\n\r\n    // if(props.basic.length === 0){\r\n    //     return <Redirect to=\"/login\" />\r\n    // }else{\r\n    return (\r\n        <Layout>\r\n            <Header />\r\n            <Layout style={{ marginTop: 64, height: '100vh' }}>\r\n                <Content className=\"login\">\r\n                    <div className=\"login-box\">\r\n                        <Heading heading={<b>Update Password</b>} />\r\n                        <Form onSubmitHandler={onFormSubmit}>\r\n                            <InputType\r\n                                type=\"password\"\r\n                                value={password}\r\n                                name=\"password\"\r\n                                prefixType=\"lock\"\r\n                                placeholder=\"Enter New Password\"\r\n                                onInputChange={onInputChange}\r\n                                isRequired={true}\r\n                                labelName=\"New Password\"\r\n                            />\r\n                            <InputType\r\n                                type=\"text\"\r\n                                value={reTypePassword}\r\n                                name=\"reTypePassword\"\r\n                                prefixType=\"lock\"\r\n                                placeholder=\"Retype Password\"\r\n                                onInputChange={onInputChange}\r\n                                isRequired={true}\r\n                                labelName=\"Retype Password\"\r\n                            />\r\n                            {err}\r\n                            <Button isType='primary' htmlTypes='submit' isBlock={true}>UPDATE</Button>\r\n                        </Form>\r\n                    </div>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center', marginBottom: 64 }}>\r\n                    Copyright Â© 2018. Ethereal Machines Pvt Ltd. All rights reserved.\r\n                        </Footer>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n\r\n}\r\n// }\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        basic: state.Basic.basic\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        firstTime: (data) => {\r\n            dispatch({\r\n                type: actionType.FIRST_TIME,\r\n                value: data\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdatePassword)"," \r\n\r\nimport React from 'react'\r\n\r\nconst formControl = (props) => {\r\n    return(\r\n        <div className=\"form-control\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default formControl"," \r\n\r\n import React from 'react'\r\nimport { Button } from 'antd'\r\n\r\nconst btn = (props) => {\r\n    return(\r\n        <Button \r\n            htmlType={props.htmlTypes} \r\n            block={props.isBlock ? true : false}\r\n            size={props.isSize ? props.isSize : 'large'}\r\n            type={props.isType ? props.isType : 'default'}\r\n            disabled={props.isDisabled ? props.isDisabled : false}\r\n            shape={props.shape}\r\n            className={props.classValue}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default btn"," \r\n\r\nimport React from 'react'\r\n\r\nconst forms = (props) => {\r\n    return(\r\n        <form onSubmit={props.onSubmitHandler}>\r\n            {props.children}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default forms"," \r\n\r\nimport React from 'react'\r\n\r\nconst heading = (props) => {\r\n    return(\r\n        <div className=\"heading\">\r\n            <h1>{props.heading}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default heading"," \n\nimport React from 'react'\nimport { Input } from 'antd';\nimport Icon from '@ant-design/icons';\nimport FormControl from './form-control'\n\nconst inputType =(props)=> {\n    return(\n        <FormControl>\n            <label htmlFor={props.name}>\n                {props.labelName}\n                {props.isRequired ? <span className=\"star\">*</span> : null}\n            </label>\n            <Input\n                type={props.type}\n                className={props.classValue}\n                placeholder={props.placeholder}\n                prefix={props.prefixType ? <Icon type={props.prefixType} style={{ color: 'rgba(0,0,0,.25)' }} /> : null}\n                name={props.name}\n                value={props.value}\n                onChange={props.onInputChange}\n                required={props.isRequired ? props.isRequired : false}\n                size='large'\n                readOnly={props.isReadonly ? props.isReadonly : false}\n            />\n        </FormControl>\n        \n    )\n}\n\nexport default inputType\n"],"sourceRoot":""}