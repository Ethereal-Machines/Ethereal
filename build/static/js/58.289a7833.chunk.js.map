{"version":3,"sources":["services/api/register.js","pages/register/component/register-form/register.jsx","pages/register/register.jsx"],"names":["loginInstance","axios","create","baseURL","registerUser","callback","data","post","headers","then","res","catch","err","connect","dispatch","loginUser","type","actionType","props","useState","userFullname","phoneNumber","username","password","confirmpassword","userCompany","userAddress","errorMsg","seterrorMsg","formSubmissionStart","setformSubmissionStart","handleInputChange","e","target","name","value","loginCallback","status","sessionStorage","setItem","auth_token","history","push","utilityFunctions","response","Error","onSubmit","preventDefault","htmlFor","className","id","placeholder","options","defaultValue","required","onChange","isRequired","onClick","console","log","Register"],"mappings":"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","file":"static/js/58.289a7833.chunk.js","sourcesContent":["/**\r\n * Created by rozer on 8/16/2018.\r\n */\r\nimport axios from 'axios';\r\n\r\nconst loginInstance = axios.create({\r\n    baseURL: 'https://api.etherealmachines.com'\r\n});\r\n\r\nconst registerUser = (callback, data) => {\r\n    loginInstance.post(`/auth/token/login/`, data, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'content-type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW',\r\n\r\n        }\r\n      })\r\n        .then((res) => { callback(res) })\r\n        .catch(err => callback(err))\r\n}\r\n\r\nexport default registerUser\r\n","import React, { Component, useState } from 'react'\r\nimport ErrorBox from '../../../../components/pages-component/form/components/error-box'\r\nimport Loader from '../../../../components/ui/loader/loader'\r\nimport '../../../../components/pages-component/button/button.css'\r\nimport FormControl from '../../../../components/pages-component/form-controls/components/form-control'\r\nimport { connect } from 'react-redux'\r\nimport registerUser from '../../../../services/api/register'\r\nimport * as actionType from '../../../../store/actions/action-type'\r\nimport * as utilityFunctions from '../../../../utility-functions/utility-functions';\r\nimport TextArea from '../../../../components/pages-component/form-controls/text-area';\r\nimport Select from '../../../../components/pages-component/form-controls/select';\r\n\r\nconst RegisterForm = (props) => {\r\n\r\n    const [userFullname, setuserFullname] = useState('')\r\n    const [phoneNumber, setphoneNumber] = useState('')\r\n    const [username, setusername] = useState('')\r\n    const [password, setpassword] = useState('')\r\n    const [confirmpassword, setconfirmpassword] = useState('')\r\n    const [userCompany, setuserCompany] = useState('')\r\n    const [userAddress, setuserAddress] = useState('')\r\n    const [errorMsg, seterrorMsg] = useState(null)\r\n    const [formSubmissionStart, setformSubmissionStart] = useState(false)\r\n\r\n    const onSubmitLogin = (e) => {\r\n        e.preventDefault()\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        e.target.name(e.target.value)\r\n    };\r\n\r\n    const loginCallback = (data) => {\r\n        if (data.status === 200) {\r\n            sessionStorage.setItem('jwt', data.data.auth_token);\r\n            props.loginUser()\r\n            props.history.push(\"/\");\r\n            utilityFunctions.clearSelectField('.select-input');\r\n            seterrorMsg(null)\r\n            setformSubmissionStart(false)\r\n        } else if (data.response) {\r\n            seterrorMsg(data.response.data)\r\n            setformSubmissionStart(false)\r\n        } else {\r\n            const genericErrorMsg = { Error: [\"Oops! Something went wrong, please try again.\"] };\r\n            seterrorMsg(genericErrorMsg)\r\n            setformSubmissionStart(false)\r\n        }\r\n    };\r\n\r\n    const logedIn = () => {\r\n        const data = {\r\n            username: username,\r\n            password: password\r\n        };\r\n        registerUser(loginCallback, data);\r\n    };\r\n\r\n    const usertype = [\r\n        { id: 1, value: 'General Queries' },\r\n        { id: 2, value: 'Become a reseller or distributor' },\r\n        { id: 3, value: 'Media Queries' },\r\n    ];\r\n\r\n    return (\r\n        <form onSubmit={onSubmitLogin}>\r\n            <FormControl>\r\n                <label htmlFor=\"usertype\">\r\n                    User Type\r\n                        <span className=\"star\">*</span>\r\n                </label>\r\n                <Select\r\n                    id=\"usertype\"\r\n                    name=\"usertype\"\r\n                    placeholder=\"select the User type\"\r\n                    className=\"input-element\"\r\n                    options={usertype} defaultValue={\"select the user Type\"}\r\n                    required={true}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n            </FormControl>\r\n            <FormControl>\r\n                <label htmlFor=\"userFullname\">\r\n                    Full Name\r\n                    <span className=\"star\">*</span>\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"userFullname\"\r\n                    placeholder=\"Enter the Full Name\"\r\n                    className=\"input-element\"\r\n                    id=\"userFullname\"\r\n                    required={true}\r\n                    value={userFullname}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n                <label htmlFor=\"phoneNumber\">\r\n                    Phone Number\r\n                    <span className=\"star\">*</span>\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"phoneNumber\"\r\n                    placeholder=\"Enter the Phone Number\"\r\n                    className=\"input-element\"\r\n                    id=\"phoneNumber\"\r\n                    required={true}\r\n                    value={phoneNumber}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n                <label htmlFor=\"username\">\r\n                    Email ID\r\n                        <span className=\"star\">*</span>\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Enter the User Email\"\r\n                    className=\"input-element\"\r\n                    id=\"username\"\r\n                    required={true}\r\n                    value={username}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n                <label htmlFor=\"password\">\r\n                    Password\r\n                        <span className=\"star\">*</span>\r\n                </label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Enter the Password\"\r\n                    className=\"input-element\"\r\n                    id=\"password\"\r\n                    required={true}\r\n                    value={password}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n                <label htmlFor=\"password\">\r\n                    Confirm Password\r\n                        <span className=\"star\">*</span>\r\n                </label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"confirmpassword\"\r\n                    placeholder=\"Re-enter the Password\"\r\n                    className=\"input-element\"\r\n                    id=\"confirmpassword\"\r\n                    required={true}\r\n                    value={confirmpassword}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n            </FormControl>\r\n\r\n            <FormControl>\r\n                <label htmlFor=\"userCompany\">\r\n                    Company Name\r\n                        <span className=\"star\">*</span>\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"userCompany\"\r\n                    placeholder=\"Enter the Company Name\"\r\n                    className=\"input-element\"\r\n                    id=\"userCompany\"\r\n                    required={true}\r\n                    value={userCompany}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n\r\n            </FormControl>\r\n            <FormControl>\r\n                <label htmlFor=\"userAddress\">\r\n                    Address\r\n                        <span className=\"star\">*</span>\r\n                </label>\r\n                {/* <TextArea \r\n                    labelName={\"Specific Queries\"} \r\n                    inputName={\"specificQueries\"} \r\n                    placeholder={\"Add details about product/design/type of machining\"}  \r\n                    {...props} /> */}\r\n                <TextArea\r\n                    name=\"userAddress\"\r\n                    placeholder=\"Enter the Address\"\r\n                    className=\"input-element\"\r\n                    id=\"userAddress\"\r\n                    required={true}\r\n                    value={userAddress}\r\n                    onChange={e => handleInputChange(e)}\r\n                />\r\n            </FormControl>\r\n\r\n\r\n            {errorMsg ? <ErrorBox isRequired errorMsg={errorMsg} /> : null}\r\n            {formSubmissionStart ? <Loader>Submitting your request...</Loader> : null}\r\n            <button className=\"form-btn\" onClick={logedIn}>Register</button>\r\n            <button className=\"form-btn-scl\" onClick={console.log(\"called\")}>Register using Facebook or google</button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loginUser: () => {\r\n            dispatch({\r\n                type: actionType.LOGIN,\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(RegisterForm)\r\n","/*\r\n * __author__ = 'Kanishka Mohan Madhuni <kmmadhuni@gmail.com>'\r\n * __copyright__ = 'Copyright (C) 2018 Ethereal Machines Pvt. Ltd. All rights reserved'\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport RegisterForm from './component/register-form/register'\r\nimport Header from '../../components/layout/header/header';\r\nimport Footer from '../../components/layout/footer/footer';\r\n\r\nconst Register = (props) => {\r\n\r\n    return (\r\n      <div className=\"page page--login\">\r\n        <Header />\r\n        <section className=\"section flex-row\">\r\n          <div className=\"container\">\r\n           <RegisterForm history={props.history}/>\r\n          </div>\r\n        </section>\r\n        <Footer />\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}